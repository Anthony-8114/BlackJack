package com.mycompany.blackjack;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.HashMap;
import javax.imageio.ImageIO;
import java.util.List;

public class BlackjackGUI 
{
    private JFrame frame;
    private JPanel panel, cardPanel, houseCardPanel;
    private JButton hitButton, standButton, doubleButton, newGameButton;
    private JLabel playerScoreLabel, houseScoreLabel, resultLabel, balanceLabel;
    private GameLogic game;
    private Bank bank;
    private int currentBet;
    private ImageIcon cardBackImage;

    public BlackjackGUI() 
    {
        // Lodas the main game / creates the deck
        HashMap<String, Integer> deck = SetDeck.createDeck();
        game = new GameLogic(deck);
        bank = new Bank();

        // Load the back image for the cards
        try 
        {
            String backImagePath = "src/main/java/com/mycompany/blackjack/cards/back.png";
            File backImageFile = new File(backImagePath);
            Image backImage = ImageIO.read(backImageFile);
            backImage = backImage.getScaledInstance(80, 120, Image.SCALE_SMOOTH);
            cardBackImage = new ImageIcon(backImage);
        } 
        catch (Exception e)    
        {
            System.out.println("Error loading card back image: " + e.getMessage());
            cardBackImage = createDefaultCardImage();
        }

        // Set up the main window
        frame = new JFrame("Blackjack");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 700);

        // Main panel and green background
        panel = new JPanel(new BorderLayout()) 
        {
            @Override
            protected void paintComponent(Graphics g) 
            {
                super.paintComponent(g);
                g.setColor(new Color(0, 100, 0));
                g.fillRect(0, 0, getWidth(), getHeight());
            }
        };
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Top panel (game info)
        JPanel topPanel = new JPanel(new GridLayout(1, 3));
        topPanel.setOpaque(false);
        balanceLabel = new JLabel("Balance: $" + bank.getBalance());
        balanceLabel.setForeground(Color.WHITE);
        balanceLabel.setFont(new Font("Arial", Font.BOLD, 16));
        balanceLabel.setHorizontalAlignment(SwingConstants.CENTER);

        playerScoreLabel = new JLabel("Your score: 0");
        playerScoreLabel.setForeground(Color.WHITE);
        playerScoreLabel.setFont(new Font("Arial", Font.BOLD, 16));
        playerScoreLabel.setHorizontalAlignment(SwingConstants.CENTER);

        houseScoreLabel = new JLabel("House score: 0");
        houseScoreLabel.setForeground(Color.WHITE);
        houseScoreLabel.setFont(new Font("Arial", Font.BOLD, 16));
        houseScoreLabel.setHorizontalAlignment(SwingConstants.CENTER);

        topPanel.add(houseScoreLabel);
        topPanel.add(balanceLabel);
        topPanel.add(playerScoreLabel);

        // House card panel
        houseCardPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, -20, 5));
        houseCardPanel.setOpaque(false);
        houseCardPanel.setBorder(BorderFactory.createTitledBorder(
            BorderFactory.createLineBorder(Color.WHITE), "House Hand"));
        ((javax.swing.border.TitledBorder)houseCardPanel.getBorder()).setTitleColor(Color.WHITE);
        houseCardPanel.setPreferredSize(new Dimension(800, 180));

        // Player card panel
        cardPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, -20, 5));
        cardPanel.setOpaque(false);
        cardPanel.setBorder(BorderFactory.createTitledBorder(
            BorderFactory.createLineBorder(Color.WHITE), "Your Hand"));
        ((javax.swing.border.TitledBorder)cardPanel.getBorder()).setTitleColor(Color.WHITE);
        cardPanel.setPreferredSize(new Dimension(800, 180));

        // Result
        resultLabel = new JLabel("");
        resultLabel.setForeground(Color.YELLOW);
        resultLabel.setFont(new Font("Arial", Font.BOLD, 24));
        resultLabel.setHorizontalAlignment(SwingConstants.CENTER);

        // Button
        JPanel buttonPanel = new JPanel();
        buttonPanel.setOpaque(false);
        hitButton = new JButton("Hit");
        standButton = new JButton("Stand");
        doubleButton = new JButton("Double Down");
        newGameButton = new JButton("New Game");

        // Style buttons
        styleButton(hitButton);
        styleButton(standButton);
        styleButton(doubleButton);
        styleButton(newGameButton);

        buttonPanel.add(hitButton);
        buttonPanel.add(standButton);
        buttonPanel.add(doubleButton);
        buttonPanel.add(newGameButton);

        // House cards and result
        JLayeredPane layeredPane = new JLayeredPane();
        layeredPane.setPreferredSize(new Dimension(800, 250));
        
        JPanel housePanelWrapper = new JPanel(new BorderLayout());
        housePanelWrapper.setOpaque(false);
        housePanelWrapper.add(houseCardPanel, BorderLayout.CENTER);
        housePanelWrapper.setBounds(0, 0, 800, 200);
        
        resultLabel.setBounds(300, 80, 200, 40);
        
        layeredPane.add(housePanelWrapper, JLayeredPane.DEFAULT_LAYER);
        layeredPane.add(resultLabel, JLayeredPane.PALETTE_LAYER);

        // Main layout
        panel.add(topPanel, BorderLayout.NORTH);
        panel.add(layeredPane, BorderLayout.CENTER);
        
        JPanel bottomPanel = new JPanel(new BorderLayout());
        bottomPanel.setOpaque(false);
        bottomPanel.add(cardPanel, BorderLayout.CENTER);
        bottomPanel.add(buttonPanel, BorderLayout.SOUTH);
        panel.add(bottomPanel, BorderLayout.SOUTH);

        setupButtonListeners();

        startNewGame();

        frame.add(panel);
        frame.setVisible(true);
    }

    private void styleButton(JButton button) 
    {
        button.setBackground(new Color(0, 70, 0));
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setFont(new Font("Arial", Font.BOLD, 14));
        button.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));
        button.setPreferredSize(new Dimension(120, 40));
    }

    private ImageIcon createDefaultCardImage()
    {
        BufferedImage image = new BufferedImage(80, 120, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = (Graphics2D) image.getGraphics();
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, 80, 120);
        g.setColor(Color.BLACK);
        g.drawRect(0, 0, 79, 119);
        g.setFont(new Font("Arial", Font.BOLD, 20));
        g.drawString("?", 35, 60);
        return new ImageIcon(image);
    }

    private ImageIcon getCardImage(String cardName)
    {
        try 
        {
            String[] parts = cardName.split(" ");
            String rank = parts[0].toLowerCase();
            String suit = parts[2].toLowerCase();

            if (rank.equals("a")) rank = "ace";

            String imagePath = "src/main/java/com/mycompany/blackjack/cards/" + rank + "_of_" + suit + ".png";
            
            Image image = ImageIO.read(new File(imagePath));
            return new ImageIcon(image.getScaledInstance(80, 120, Image.SCALE_SMOOTH));
        }
        catch (Exception e)
        {
            System.out.println("Error loading " + cardName + ": " + e.getMessage());
            return createDefaultCardImage();
        }
    }

    private void setupButtonListeners() 
    {
        hitButton.addActionListener(e -> 
        {
            game.hit("player");
            updateGameState();
            if (game.getPlayerScore() >= 21) 
            {
                endPlayerTurn();
            }
        });

        standButton.addActionListener(e -> endPlayerTurn());

        doubleButton.addActionListener(e -> 
        {
            if (bank.getBalance() >= currentBet) 
            {
                currentBet *= 2;
                game.hit("player");
                updateGameState();
                endPlayerTurn();
            } 
            
            else 
            {
                JOptionPane.showMessageDialog(frame, "Not enough balance to double!");
            }
        });

        newGameButton.addActionListener(e -> startNewGame());
    }

    private void startNewGame() 
    {
        houseCardPanel.removeAll();
        cardPanel.removeAll();
        
        HashMap<String, Integer> deck = SetDeck.createDeck();
        game = new GameLogic(deck);
        
        String betInput = JOptionPane.showInputDialog(frame, "Enter your bet:", "New Game", JOptionPane.PLAIN_MESSAGE);
        try 
        {
            currentBet = Integer.parseInt(betInput);
            if (currentBet <= 0 || currentBet > bank.getBalance()) 
            {
                JOptionPane.showMessageDialog(frame, "Invalid bet amount!");
                return;
            }
        } 
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(frame, "Please enter a valid number!");
            return;
        }

        game.hit("player");
        game.hit("house");
        game.hit("player");
        game.hit("house");

        updateGameState();
        resultLabel.setText("");
    }

    private void updateGameState() 
    {
        // Update house cards
        houseCardPanel.removeAll();
        List<String> houseHand = game.getHouseHand();
        if (!houseHand.isEmpty()) 
        {
            houseCardPanel.add(new JLabel(getCardImage(houseHand.get(0))) 
            {
                @Override public Dimension getPreferredSize() { return new Dimension(80, 120); }
            });
            
            for (int i = 1; i < houseHand.size(); i++)
            {
                houseCardPanel.add(new JLabel(cardBackImage) 
                {
                    @Override public Dimension getPreferredSize() { return new Dimension(80, 120); }
                });
            }
        }
        
        // Update player cards
        cardPanel.removeAll();
        for (String card : game.getPlayerHand()) 
        {
            cardPanel.add(new JLabel(getCardImage(card)) 
            {
                @Override public Dimension getPreferredSize() { return new Dimension(80, 120); }
            });
        }
        
        // Update scores
        playerScoreLabel.setText("Your score: " + game.getPlayerScore());
        houseScoreLabel.setText("House score: " + (houseHand.size() > 1 ? "?" : String.valueOf(game.getHouseScore())));
        
        houseCardPanel.revalidate();
        houseCardPanel.repaint();
        cardPanel.revalidate();
        cardPanel.repaint();
    }

    private void endPlayerTurn() 
    {
        while (game.getHouseScore() <= 16 && game.getPlayerScore() <= 21) 
        {
            game.hit("house");
        }

        houseCardPanel.removeAll();
        for (String card : game.getHouseHand()) 
        {
            houseCardPanel.add(new JLabel(getCardImage(card)) 
            {
                @Override public Dimension getPreferredSize() { return new Dimension(80, 120); }
            });
        }
        
        houseScoreLabel.setText("House score: " + game.getHouseScore());

        Boolean result = game.bustCheck();
        if (result == null) 
        {
            resultLabel.setText("It's a draw!");
        } 
        else if (result) 
        {
            resultLabel.setText("You win!");
            bank.increaseBalance(currentBet);
        } 
        else
        {
            resultLabel.setText("You lose!");
            bank.deductBalance(currentBet);
        }

        balanceLabel.setText("Balance: $" + bank.getBalance());
        houseCardPanel.revalidate();
        houseCardPanel.repaint();
    }

    public static void main(String[] args) 
    {
        SwingUtilities.invokeLater(() -> new BlackjackGUI());
    }
}
